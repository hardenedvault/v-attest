#!/usr/bin/python3
"""
Quote and Eventlog validating Attestation Server.

This server accepts incoming HTTP POST requests from an attesting machine
that contain a tar file of a TPM Endorsement Key, Attestation Key, Quote,
PCR list, Eventlog and other details. It performs three actions:

* Validates that the Quote is signed by the AK
* Validates that the EK certificate has a good trust chain
* Validaets that the PCR extensions in the Eventlog produce the PCRs in the quote

It then invokes an external handler to verify that the eventlog
meets the policy requirements, and will return any output from this
handler to the attesting machine.
"""
from http.server import SimpleHTTPRequestHandler, HTTPServer
import os
import logging
import tempfile
import sys
import subprocess
import yaml
import hashlib

# hard code the hashing algorithm used
alg = 'sha256'
env = dict(os.environ)
env["V_ATTEST_MODE"] = 'server'

class AttestServer(SimpleHTTPRequestHandler):
	def fail(self, msg):
		logging.info("FAILED: ", msg)
		self.send_response(401)
		self.send_header('Content-type', 'text/html')
		self.end_headers()
		self.wfile.write(msg.encode())

	def do_GET(self):
		logging.info("GET request,\nPath: %s\nHeaders:\n%s\n", str(self.path), str(self.headers))
		return super().do_GET()
		#self.send_response(200)
		#self.send_header('Content-type', 'text/html')
		#self.end_headers()
		#self.wfile.write("Only POST is supported".encode())

	def do_POST(self):
		content_length = int(self.headers.get('Content-Length',0))
		quote_data = self.rfile.read(content_length)

		# write post data into a file
		tmp_file = tempfile.NamedTemporaryFile(dir=env['RUN_PATH'])
		tmp_file.write(quote_data)
		tmp_file.flush()
		quote_file = tmp_file.name

		# verify that the Endorsment Key came from an authorized TPM,
		# that the quote is signed by a valid Attestation Key
		sub = subprocess.run(["tpm2-attest", "verify", quote_file ],
			stdout=subprocess.PIPE,
			stderr=sys.stderr,
			env=env,
		)

		quote_valid = sub.returncode == 0

		# The output contains YAML formatted hash of the EK and the PCRs
		quote = yaml.safe_load(sub.stdout)
		if 'ekhash' in quote:
			ekhash = quote['ekhash']
		else:
			quote_valid = False
			ekhash = "UNKNOWN"

		with open(env['RUN_PATH'] + "/quote.yaml", "w") as y:
			y.write(str(quote))

		# Validate that the every computed PCR in the eventlog
		# matches a quoted PCRs.
		# This makes no statements about the validitiy of the
		# event log, only that it is consistent with the quote.
		# Other PCRs may have values, which is the responsibility
		# of the verifier to check.
		if alg not in quote['pcrs']:
			logging.warning(f"{ekhash=}: quote does not have hash {alg}")
		quote_pcrs = quote['pcrs'][alg]

		# XXX We need a way to configure whether the eventlog is optional
		if quote['eventlog-pcrs'] != None:
			eventlog_pcrs = quote['eventlog-pcrs'][alg]

			for pcr_index in eventlog_pcrs:
				eventlog_pcr = eventlog_pcrs[pcr_index]

				if pcr_index in quote_pcrs:
					quote_pcr = quote_pcrs[pcr_index]
					if quote_pcr != eventlog_pcr:
						logging.warning(f"{ekhash=}: {pcr_index=} {quote_pcr=} != {eventlog_pcr=}")
						quote_valid = False
					else:
						logging.info(f"{ekhash=}: {pcr_index=} {quote_pcr=} good")

		if quote_valid:
			logging.info(f"{ekhash=}: so far so good")
		else:
			logging.warning(f"{ekhash=}: not good at all")

		# the quote, eventlog and PCRS are consistent, so ask the verifier to
		# process the eventlog and decide if the eventlog meets policy for
		# this ekhash.
		sub = subprocess.run(["attest-verify", "verify", str(quote_valid)],
			input=bytes(str(quote), encoding="utf-8"),
			stdout=subprocess.PIPE,
			stderr=sys.stderr,
			env=env,
		)

		if sub.returncode != 0:
			return self.fail("ATTEST_VERIFY FAILED")

		# read the (binary) response from the sub process stdout
		response = sub.stdout
	
		# attest-verify returned "success", meaning that it has data
		# to send to the attesting machine.  Seal this for the remote
		# machine based on its AK
		self.send_response(200)
		self.send_header('Content-type', 'application/octet-stream')
		self.end_headers()

		subprocess.run(["tpm2-attest", "seal", quote_file, ],
			input=response,
			stdout=self.wfile,
			stderr=sys.stderr,
			env=env,
		)

def run(port=8080):
	logging.basicConfig(level=logging.INFO)
	server_address = ('', port)
	httpd = HTTPServer(server_address, AttestServer)
	logging.info('Starting attestation httpd port %d...\n' % (port))
	try:
		httpd.serve_forever()
	except KeyboardInterrupt:
		pass
	httpd.server_close()
	logging.info('Stopping httpd...\n')

if __name__ == '__main__':
	from sys import argv

	if len(argv) > 2:
		print("Usage: attest-server [port]", file=sys.stderr)
		exit(1)

	if len(argv) == 2:
		run(port=int(argv[1]))
	else:
		run()
	exit(0)
